// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  bankAccounts  BankAccount[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BankAccount {
  id          String   @id @default(cuid())
  userId      String
  accountType AccountType @default(CHECKING)
  balance     Decimal  @default(0) @db.Decimal(10, 2)
  accountNumber String @unique
  routingNumber String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Transaction relationships
  sentTransfers     Transaction[] @relation("SenderAccount")
  receivedTransfers Transaction[] @relation("ReceiverAccount")
}

model Transaction {
  id                String            @id @default(cuid())
  amount            Decimal           @db.Decimal(10, 2)
  description       String?
  type              TransactionType
  status            TransactionStatus @default(PENDING)
  reference         String            @unique @default(cuid())
  
  // Account relationships
  senderAccountId   String?
  receiverAccountId String?
  senderAccount     BankAccount?      @relation("SenderAccount", fields: [senderAccountId], references: [id])
  receiverAccount   BankAccount?      @relation("ReceiverAccount", fields: [receiverAccountId], references: [id])
  
  // External transfer data
  externalAccountNumber String?
  externalRoutingNumber String?
  externalBankName      String?
  
  // Metadata
  metadata          Json?
  processingFee     Decimal?          @db.Decimal(10, 2)
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  processedAt       DateTime?
  
  @@map("transactions")
}

enum Role {
  USER
  ADMIN
}

enum AccountType {
  CHECKING
  SAVINGS
}

enum TransactionType {
  INTERNAL_TRANSFER
  EXTERNAL_TRANSFER
  DEPOSIT
  WITHDRAWAL
  FEE
  INTEREST
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}